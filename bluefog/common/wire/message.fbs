// Copyright 2016 The TensorFlow Authors. All Rights Reserved.
// Modifications copyright (C) 2017 Uber Technologies, Inc.
// Modifications copyright (C) 2020 Bluefog Team.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =============================================================================

namespace bluefog.common.wire;

// Supported data types.
enum DataType:byte {
    BLUEFOG_UINT8 = 0,
    BLUEFOG_INT8 = 1,
    BLUEFOG_UINT16 = 2,
    BLUEFOG_INT16 = 3,
    BLUEFOG_INT32 = 4,
    BLUEFOG_INT64 = 5,
    BLUEFOG_FLOAT16 = 6,
    BLUEFOG_FLOAT32 = 7,
    BLUEFOG_FLOAT64 = 8,
    BLUEFOG_BOOL = 9,
    BLUEFOG_BYTE = 10
}

// An Request is a message sent from a rank greater than zero to the
// coordinator (rank zero), informing the coordinator of an operation that
// the rank wants to do and the tensor that it wants to apply the operation to.
enum RequestType:byte {
    UNKNOWN = 0,
    ALLREDUCE = 1,
    ALLGATHER = 2,
    BROADCAST = 3,
    NEIGHBOR_ALLREDUCE = 4,
    NEIGHBOR_ALLGATHER = 5,
    WIN_CREATE = 6,
    WIN_FREE = 7,
    WIN_PUT = 8,
    WIN_GET = 9,
    WIN_ACCUMULATE = 10,
    BARRIER = 11,
    PAIR_GOSSIP = 12
}
table Request {
    // The request rank is necessary to create a consistent ordering of results,
    // for example in the allgather where the order of outputs should be sorted
    // by rank.
    request_rank:int;
    request_type:RequestType;
    tensor_type:DataType;
    tensor_name:string;

    // Root rank is necessary for broadcast operation.
    root_rank:int;

    // Device this request is made on.
    device:int;

    // We use a repeated integer to represent the tensor shape.
    tensor_shape:[long];
}
table RequestList {
    requests:[Request];

    // Flag indicating if worker is requesting a shutdown.
    shutdown:bool;

    // Flag indicating if the underlying topology is requested to change.
    change_topo:bool;
}

// An Response is a message sent from the coordinator (rank zero) to a rank
// greater than zero, informing the rank of an operation should be performed
// now. If the operation requested would result in an error (for example, due
// to a type or shape mismatch), then the Response can contain an error and
// an error message instead.
// Note some types like win_put, win_get neven go through the negotiation.
// Hence response type will not contain them.
enum ResponseType:byte {
    ERROR = 0,
    ALLREDUCE = 1,
    ALLGATHER = 2,
    BROADCAST = 3,
    NEIGHBOR_ALLREDUCE = 4,
    NEIGHBOR_ALLGATHER = 5,
    WIN_CREATE = 6,
    WIN_FREE = 7,
}
table Response {
    response_type:ResponseType;

    // If tensor_names has more than one entry, this is a fused operation and the
    // rest of the fields are the same.
    tensor_names:[string];

    // Empty unless response_type is ERROR.
    error_message:string;

    // List of devices participating in this operation.
    devices:[int];
}
table ResponseList {
    responses:[Response];

    // Flag indicating if worker is requested to shutdown.
    shutdown:bool;

    // Flag indicating if the underlying topology is requested to change.
    change_topo:bool;
}
